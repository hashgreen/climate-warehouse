# Default values for chia-docker.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: ghcr.io/chia-network/chia
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: "1.8.1"

imagePullSecrets: [ ]
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: { }
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: { }

podSecurityContext: { }
# fsGroup: 2000

securityContext: { }
  # capabilities:
  #   drop:
#   - ALL
# readOnlyRootFilesystem: true
# runAsNonRoot: true
# runAsUser: 1000

service:
  type: ClusterIP
  port: 8555

ingress:
  enabled: false
  className: ""
  annotations: { }
  # kubernetes.io/ingress.class: nginx
  # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: [ ]
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: { }
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
#   memory: 128Mi
# requests:
#   cpu: 100m
#   memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: { }

tolerations: [ ]

affinity: { }

updateStrategy:
  ## StrategyType
  ## Can be set to RollingUpdate or OnDelete
  ##
  type: RollingUpdate

startupProbe:
  enabled: true
  periodSeconds: 30
  failureThreshold: 10
  successThreshold: 1
  exec:
    command:
      - sh
      - -c
      - >-
        curl -X POST --fail --cert "${CHIA_ROOT}/config/ssl/wallet/private_wallet.crt" --key "${CHIA_ROOT}/config/ssl/wallet/private_wallet.key" -d '{}' -k -H "Content-Type: application/json" https://localhost:9256/healthz | python3 -c "import sys, json; print(json.load(sys.stdin)['success'])" | grep 'True'

livenessProbe:
  enabled: true
  periodSeconds: 30
  failureThreshold: 10
  successThreshold: 1
  exec:
    command:
      - sh
      - -c
      - >-
        curl -X POST --fail --cert "${CHIA_ROOT}/config/ssl/wallet/private_wallet.crt" --key "${CHIA_ROOT}/config/ssl/wallet/private_wallet.key" -d '{}' -k -H "Content-Type: application/json" https://localhost:9256/healthz | python3 -c "import sys, json; print(json.load(sys.stdin)['success'])" | grep 'True'

readinessProbe:
  enabled: true
  periodSeconds: 1
  failureThreshold: 1
  successThreshold: 1
  exec:
    command:
      - sh
      - -c
      - >-
        curl -X POST --fail --cert "${CHIA_ROOT}/config/ssl/wallet/private_wallet.crt" --key "${CHIA_ROOT}/config/ssl/wallet/private_wallet.key" -d '{}' -k -H "Content-Type: application/json" https://localhost:9256/healthz | python3 -c "import sys, json; print(json.load(sys.stdin)['success'])" | grep 'True'

persistence:
  enabled: true
  existingClaim: ""
  subPath: ""
  storageClass: ""
  annotations: { }
  accessModes:
    - ReadWriteOnce
  size: 128Gi
  selector: { }

secret:
  existingClaim: "climate-warehouse-key"

env:
  chiaRoot: "/root/.chia/testnet"

  testnet: true

  TZ: "UTC"

  ## https://github.com/Chia-Network/chia-blockchain/blob/main/chia/util/service_groups.py
  service: "data"

  keys: "/key"

  log:
    level: "INFO"
